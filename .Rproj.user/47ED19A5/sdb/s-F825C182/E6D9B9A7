{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Análise preliminar: planos de saúde\"\nauthor: \"Julio Trecenti\"\ndate: \"April 26, 2017\"\noutput: html_document\n---\n\n# Introdução\n\nNessa análise preliminar consideramos acórdãos do TJSP com assunto \"Planos de saúde\". Esse filtro não é ideal para a análise pois existem processos envolvendo planos de saúde classificados em outros assuntos. No entanto, para um primeiro estudo esse escopo é suficiente.\n\nA análise passa por três etapas, descritas abaixo.\n\n- **Download**. Utilizamos os pacotes `esaj` e `tjsp` para baixar listas de processos automaticamente do TJSP.\n- **Limpeza**. Seleção e transformação das variáveis.\n- **Análise descritiva**. Alguns gráficos e tabelas sobre os casos baixados.\n\n## Pacotes utilizados\n\nEsse relatório foi construído em **RMarkdown** e é completamente reprodutível. Os pacotes utilizados para as análises estão listados abaixo:\n\n```{r warning=FALSE, message=FALSE}\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(lubridate)\nlibrary(esaj) # github.com/courtsbr/esaj\nlibrary(tjsp) # github.com/courtsbr/tjsp\n```\n\n# Download\n\nLista de assuntos do TJSP na Consulta de Julgados do Segundo Grau:\n\n```{r}\n# assuntos <- cjsg_tabs('assuntos')\n# write_rds(assuntos, 'assuntos.rds', compress = 'bz')\nassuntos <- read_rds('assuntos.rds')\n```\n\nAgora pegamos apenas o assunto de planos de saúde.\n\n```{r}\ncod_assuntos <- assuntos %>% \n  filter(str_detect(titulo_leaf, 'Planos de S')) %>% \n  with(cod_leaf)\n```\n\nAbrimos uma sessão de conexão com o TJSP e inserimos as informações de pesquisa (somente os assuntos).\n\n```{r}\ns <- cjsg_session()\nparms <- cjsg_parms(s, assunto = cod_assuntos)\n```\n\nO número de documentos no resultado da pesquisa é dado por `cjsg_npags()`:\n\n```{r message=FALSE}\nnpags <- cjsg_npags(s, parms = parms)\nnpags\n```\n\nA quantidade `r npags` é muito grande! Vamos baixar apenas as primeiras mil páginas (os documentos estão ordenados por data de publicação do acórdão, das mais recentes para as mais antigas.) O download demorou aproximadamente 40 minutos.\n\n```{r eval=FALSE}\n# nao rodar! demora\nd_result <- cjsg(s, parms = parms, path = 'data-raw/cjsg', max_pag = 1000L)\n```\n\n\nAgora, vamos ler o conteúdo desses arquivos HTML. Para isso, utilizamos `cjsg_parse`:\n\n```{r eval=FALSE}\n# nao rodar! demora\narqs <- dir('data-raw/cjsg', full.names = TRUE)\nd_cjsg <- parse_cjsg(arqs) \nwrite_rds(d_cjsg, 'd_cjsg.rds', compress = 'bz')\n```\n\n```{r}\nd_cjsg <- read_rds('d_cjsg.rds')\nd_cjsg\n```\n\nPronto! Temos uma base de dados com `r nrow(d_cjsg)`. Essa base de dados tem as seguintes informações:\n\n- `arq`: caminho do aquivo HTML.\n- `id`: id do resultado.\n- `cd_acordao`: código único do acórdão.\n- `n_processo`: número do processo (um processo pode ter mais de um acórdão).\n- `comarca`: comarca de origem do processo.\n- `data_julgamento`: data de julgamento do processo.\n- `data_registro`: data de registro da decisão (essa é a data usada para indexar as decisões.)\n- `ementa`: ementa do processo.\n- `orgao_julgador`: nome do órgão julgador.\n- `relatora`: relator(a) do processo.\n- `classe_assunto`: classe e assunto.\n- `txt_ementa`: texto da ementa (geralmente igual à `ementa`.)\n- `result`: indicador de leitura correta da página (geralmente tudo OK.)\n- `outros_numeros`: outros números do processo.\n\n# Limpeza\n\nVamos utilizar só uma parte dessas colunas. Para limpar os dados e obter a base `d_tidy`, rodamos o seguinte algoritmo.\n\n```{r}\nd_tidy <- d_cjsg %>% \n  distinct(cd_acordao, .keep_all = TRUE) %>% \n  select(cd_acordao, n_processo:classe_assunto) %>% \n  separate(classe_assunto, c('classe', 'assunto'), sep = ' / ',\n           extra = 'merge', fill = 'left') %>% \n  mutate_at(vars(starts_with('data_')), dmy)\n```\n\nA base total contém 20.000 acórdãos de 17.289 processos.\n\n# Análise descritiva\n\n## Principais classes\n\n```{r}\nd_tidy %>% \n  mutate(classe = fct_lump(classe, prop = 0.006, \n                           other_level = 'Outros')) %>% \n  count(classe, sort = TRUE) %>% \n  mutate(prop = n/sum(n)) %>% \n  janitor::add_totals_row() %>% \n  mutate(prop = scales::percent(prop)) %>% \n  knitr::kable()\n```\n\n## Evolução no tempo \n\n(tomar cuidado ao interpretar esse gráfico, pois não baixamos todos os casos!)\n\n```{r}\nd_tidy %>% \n  mutate(classe = fct_lump(classe, prop = 0.1, other_level = 'Outros')) %>% \n  mutate(mes_decisao = floor_date(data_julgamento, 'month')) %>% \n  filter(mes_decisao > '2016-05-01') %>% \n  count(mes_decisao) %>% \n  ggplot(aes(x = mes_decisao, y = n)) +\n  geom_line() +\n  geom_point() +\n  labs(x = 'Mês da decisão', 'Quantidade de decisões') +\n  theme_gray(15)\n```\n\n## Comarcas\n\nNesse caso seria interessante dividir pela população.\n\n```{r}\nd_tidy %>% \n  mutate(comarca = comarca %>% \n           fct_infreq() %>% \n           fct_lump(prop = 0.01, other_level = 'Outros')) %>%\n  count(comarca) %>% \n  mutate(prop = n / sum(n)) %>% \n  janitor::add_totals_row() %>% \n  mutate(prop = scales::percent(prop)) %>% \n  knitr::kable()\n```\n\n## Relatores\n\nNo futuro, seremos capazes de analisar a taxa de decisões favoráveis / desfavoráveis por relator e câmara.\n\n```{r}\nd_tidy %>% \n  mutate(relatora = relatora %>% \n           fct_infreq() %>% \n           fct_lump(prop = 0.02, other_level = 'Outros')) %>%\n  count(relatora) %>% \n  mutate(prop = n / sum(n)) %>% \n  janitor::add_totals_row() %>% \n  mutate(prop = scales::percent(prop)) %>% \n  knitr::kable()\n```\n\n\n## Exemplos de textos\n\n```{r}\nset.seed(1)\nd_tidy %>% \n  sample_n(1) %>% \n  with(ementa) %>% \n  cat()\n```\n\n\n```{r results='asis'}\nset.seed(1)\nd_tidy %>% \n  sample_n(5) %>% \n  with(ementa) %>% \n  cat(sep = paste0('\\n\\n', strrep('-', 80), '\\n\\n'))\n\n```\n\n\n\n",
    "created" : 1493247886972.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2359047907",
    "id" : "E6D9B9A7",
    "lastKnownWriteTime" : 1493260850,
    "last_content_update" : 1493260850152,
    "path" : "~/abj/saudeTJSP/saude.Rmd",
    "project_path" : "saude.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}